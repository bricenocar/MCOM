{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environment": {
            "type": "string",
            "metadata": {
                "description": "MCOM environment."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "SharePointUrlDCF": {
            "type": "string",
            "defaultValue": "https://statoilsrm.sharepoint.com/sites/LRMArchiveDCF",
            "metadata": {
                "description": "SharePoint site"
            }
        },
        "SharePointUrlEDI": {
            "type": "string",
            "defaultValue": "https://statoilsrm.sharepoint.com/sites/LRMArchiveEDIBank",
            "metadata": {
                "description": "SharePoint site"
            }
        },
        "SharePointUrlGAS": {
            "type": "string",
            "defaultValue": "https://statoilsrm.sharepoint.com/sites/LRMArchiveGasOpsEU",
            "metadata": {
                "description": "SharePoint site"
            }
        },
        "SharePointUrlGOM": {
            "type": "string",
            "defaultValue": "https://statoilsrm.sharepoint.com/sites/EIMGoMArchive",
            "metadata": {
                "description": "SharePoint site"
            }
        },
        "paramDataFactoryName": {
            "type": "string",
            "defaultValue": "adf-mcom",
            "metadata": {
                "description": "Data Factory Name"
            }
        },
        "functionAppUrl": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "FunctionApp url"
            }
        },
        "functionKey": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Secure string for 'functionKey' of 'MCOM Functions'"
            }
        },
        "stgAreaConnectionString": {
            "type": "string",
            "metadata": {
                "description": "Secure string for 'connectionString' of 'Staging area'"
            }
        },
        "triggerParam_SourceContainer": {
            "type": "string",
            "defaultValue": "@triggerBody().folderPath"
        },
        "triggerParam_SourceFilename": {
            "type": "string",
            "defaultValue": "@triggerBody().fileName"
        },
        "triggerScope": {
            "type": "string",
            "defaultValue": ""
        },
        "adfFunctionResourceId": {
            "type": "string",
            "defaultValue": "5e0a5f0a-db01-473c-b448-0e9711ed8f9a"
        }
    },
    "variables": {
        "dataFactoryName": "[concat(parameters('paramDataFactoryName'), '-', parameters('environment'))]",
        "factoryId": "[concat('Microsoft.DataFactory/factories/', variables('dataFactoryName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[variables('dataFactoryName')]",
            "location": "[parameters('location')]",
            "properties": {},
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/Staging area')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('stgAreaConnectionString')]"
                },
                "connectVia": {
                    "referenceName": "MCOMIntegrationRuntime",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/MCOMIntegrationRuntime')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/MCOMFunctions')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureFunction",
                "typeProperties": {
                    "functionKey": {
                        "type": "SecureString",
                        "value": "[parameters('functionKey')]"
                    },
                    "functionAppUrl": "[concat('https://', parameters('functionAppUrl'))]",
                    "authentication": "MSI",
                    "resourceId": "[parameters('adfFunctionResourceId')]"
                },
                "connectVia": {
                    "referenceName": "MCOMIntegrationRuntime",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/MCOMIntegrationRuntime')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/MCOMGovernanceDB')]",
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlMI",
                "typeProperties": {
                    "connectionString": "[concat('Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=sql-mcom-gov-', parameters('environment'), '.database.windows.net;Initial Catalog=GovernanceDB')]"
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/dcf_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Filename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@concat(dataset().Filename, '.json')",
                            "type": "Expression"
                        },
                        "folderPath": "metadata",
                        "container": "dcf"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/dcf_metadata_dataset_manual')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "dcf"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/dcf_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "output"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/edibank_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "edibank"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/edibank_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "output"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/gom_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "gom"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/gom_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "output"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/gasops_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "gasops"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/gasops_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "output"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/linkedServices/Staging area')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/exchange_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "exchange"
                    }
                },
                "schema": {}
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/exchange_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "output"
                    }
                },
                "schema": {}
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanexecution_files_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "IronMountainSFTP",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "folderPath": "/upload"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanexecution_file_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "IronMountainSFTP",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": "/upload"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanexecution_output_metadata_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": "metadata",
                        "container": "scanexecutions"
                    }
                },
                "schema": {}
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanexecution_output_file')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "files",
                        "container": "scanexecutions"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanexecution_db_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "MCOMGovernanceDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlMITable",
                "schema": [
                    {
                        "name": "filename",
                        "type": "nvarchar"
                    },
                    {
                        "name": "datescanned",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "requestId",
                        "type": "uniqueidentifier"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "MCOMScanRequest"
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/mcom_governance_scanrequests')]",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "MCOMGovernanceDB",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlMITable",
                "schema": [
                    {
                        "name": "id",
                        "type": "uniqueidentifier"
                    },
                    {
                        "name": "requester",
                        "type": "nvarchar"
                    },
                    {
                        "name": "webid",
                        "type": "nvarchar"
                    },
                    {
                        "name": "listid",
                        "type": "nvarchar"
                    },
                    {
                        "name": "siteid",
                        "type": "nvarchar"
                    },
                    {
                        "name": "requestdate",
                        "type": "datetime",
                        "precision": 23,
                        "scale": 3
                    },
                    {
                        "name": "wbs",
                        "type": "nvarchar"
                    },
                    {
                        "name": "businessunit",
                        "type": "nvarchar"
                    },
                    {
                        "name": "itemid",
                        "type": "nvarchar"
                    },
                    {
                        "name": "documentname",
                        "type": "nvarchar"
                    },
                    {
                        "name": "vendor",
                        "type": "nvarchar"
                    },
                    {
                        "name": "comments",
                        "type": "nvarchar"
                    },
                    {
                        "name": "ordernumber",
                        "type": "nvarchar"
                    },
                    {
                        "name": "status",
                        "type": "nvarchar"
                    },
                    {
                        "name": "isphysical",
                        "type": "bit"
                    },
                    {
                        "name": "filemetadata",
                        "type": "nvarchar"
                    },
                    {
                        "name": "priority",
                        "type": "nvarchar"
                    },
                    {
                        "name": "companycode",
                        "type": "nvarchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "MCOMScanRequest"
                }
            },
            "type": "Microsoft.DataFactory/factories/datasets"
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanrequest_metadata_dataset')]",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": "metadata",
                        "container": "scanrequests"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "ItemId": {
                            "type": "string"
                        },
                        "SiteId": {
                            "type": "string"
                        },
                        "WebId": {
                            "type": "string"
                        },
                        "ListId": {
                            "type": "string"
                        },
                        "WBS": {
                            "type": "string"
                        },
                        "RequestedBy": {
                            "type": "string"
                        },
                        "RequestedDate": {
                            "type": "string"
                        },
                        "DocumentName": {
                            "type": "string"
                        },
                        "Vendor": {
                            "type": "string"
                        },
                        "Comments": {
                            "type": "string"
                        },
                        "OrderNumber": {
                            "type": "string"
                        },
                        "Status": {
                            "type": "string"
                        },
                        "IsPhysical": {
                            "type": "boolean"
                        },
                        "BusinessArea": {
                            "type": "string"
                        },
                        "Priority": {
                            "type": "string"
                        },
                        "CompanyCode": {
                            "type": "string"
                        }
                    }
                }
            },
            "type": "Microsoft.DataFactory/factories/datasets"
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/scanrequest_metadata_file')]",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Staging area",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Filename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().Filename",
                            "type": "Expression"
                        },
                        "folderPath": "metadata",
                        "container": "scanrequests"
                    }
                },
                "schema": {
                    "type": "object",
                    "properties": {
                        "ItemId": {
                            "type": "string"
                        },
                        "SiteId": {
                            "type": "string"
                        },
                        "WebId": {
                            "type": "string"
                        },
                        "ListId": {
                            "type": "string"
                        },
                        "WBS": {
                            "type": "string"
                        },
                        "RequestedBy": {
                            "type": "string"
                        },
                        "RequestedDate": {
                            "type": "string"
                        },
                        "DocumentName": {
                            "type": "string"
                        },
                        "Vendor": {
                            "type": "string"
                        },
                        "Comments": {
                            "type": "string"
                        },
                        "OrderNumber": {
                            "type": "string"
                        },
                        "Status": {
                            "type": "string"
                        },
                        "IsPhysical": {
                            "type": "boolean"
                        },
                        "BusinessArea": {
                            "type": "string"
                        },
                        "Priority": {
                            "type": "string"
                        },
                        "CompanyCode": {
                            "type": "string"
                        }
                    }
                }
            },
            "type": "Microsoft.DataFactory/factories/datasets"
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/DCF Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process DCF data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetRestrictedLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessDCFdata",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'dcf/files/'}'",
                                        "type": "Expression"
                                    },
                                    "OpenLibraryDriveId": {
                                        "value": "'@{variables('OpenLibraryDriveId')}'",
                                        "type": "Expression"
                                    },
                                    "RestrictedLibraryDriveId": {
                                        "value": "'@{variables('RestrictedLibraryDriveId')}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "dcffilesource": {
                                        "Filename": {
                                            "value": "@pipeline().parameters.SourceFileName",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "DCFIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetOpenLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetOpenLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetOpenLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "OpenLibraryDriveId",
                            "value": {
                                "value": "@activity('GetOpenLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetRestrictedLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "SetOpenLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), ' SA', '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetRestrictedLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetRestrictedLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "RestrictedLibraryDriveId",
                            "value": {
                                "value": "@activity('GetRestrictedLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string"
                    },
                    "SourceFileName": {
                        "type": "string"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "[parameters('SharePointUrlDCF')]"
                    },
                    "OpenLibraryName": {
                        "type": "String",
                        "defaultValue": "DCF"
                    },
                    "RestrictedLibraryName": {
                        "type": "String",
                        "defaultValue": "DCF-SA"
                    },
                    "OpenLibraryDriveId": {
                        "type": "String"
                    },
                    "RestrictedLibraryDriveId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2021-12-08T13:03:26Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessDCFdata')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/DCFIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/DCF Pipeline Maintenance')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process DCF data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetRestrictedLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessDCFdataMaintenance",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'dcf/files/'}'",
                                        "type": "Expression"
                                    },
                                    "OpenLibraryDriveId": {
                                        "value": "'@{variables('OpenLibraryDriveId')}'",
                                        "type": "Expression"
                                    },
                                    "RestrictedLibraryDriveId": {
                                        "value": "'@{variables('RestrictedLibraryDriveId')}'",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "DCFIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetOpenLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetOpenLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetOpenLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "OpenLibraryDriveId",
                            "value": {
                                "value": "@activity('GetOpenLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "GetRestrictedLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "SetOpenLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), ' SA', '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetRestrictedLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetRestrictedLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "RestrictedLibraryDriveId",
                            "value": {
                                "value": "@activity('GetRestrictedLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "[parameters('SharePointUrlDCF')]"
                    },
                    "OpenLibraryName": {
                        "type": "String",
                        "defaultValue": "DCF"
                    },
                    "RestrictedLibraryName": {
                        "type": "String",
                        "defaultValue": "DCF-SA"
                    },
                    "OpenLibraryDriveId": {
                        "type": "String"
                    },
                    "RestrictedLibraryDriveId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2021-12-03T09:40:49Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessDCFdataMaintenance')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/DCFIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/EdiBank Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process EdiBank data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessEdiBankData",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'edibank/files/'}'",
                                        "type": "Expression"
                                    },
                                    "LibraryId": {
                                        "value": "'@{variables('LibraryId')}'",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "EdiBankIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetDestinationLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDestinationLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "LibraryId",
                            "value": {
                                "value": "@activity('GetDestinationLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "[parameters('SharePointUrlEDI')]"
                    },
                    "LibraryName": {
                        "type": "String",
                        "defaultValue": "Documents"
                    },
                    "LibraryId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2021-10-07T13:24:38Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessEdiBankData')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/EdiBankIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GasOps Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process GasOps data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessGasOpsData",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'gasops/files/'}'",
                                        "type": "Expression"
                                    },
                                    "LibraryId": {
                                        "value": "'@{variables('LibraryId')}'",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "GasOpsIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetDestinationLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), ' Gas', '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDestinationLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "LibraryId",
                            "value": {
                                "value": "@activity('GetDestinationLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string",
                        "defaultValue": "gasops"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "[parameters('SharePointUrlGAS')]"
                    },
                    "LibraryName": {
                        "type": "String",
                        "defaultValue": "Documents"
                    },
                    "LibraryId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2021-10-08T11:53:41Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessGasOpsData')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/GasOpsIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GoM Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process GoM data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessGoMData",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'gom/files/'}'",
                                        "type": "Expression"
                                    },
                                    "LibraryId": {
                                        "value": "'@{variables('LibraryId')}'",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "GasOpsIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetDestinationLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDestinationLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "LibraryId",
                            "value": {
                                "value": "@activity('GetDestinationLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string",
                        "defaultValue": "gom"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "[parameters('SharePointUrlGOM')]"
                    },
                    "LibraryName": {
                        "type": "String",
                        "defaultValue": "Documents"
                    },
                    "LibraryId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2021-12-06T14:42:12Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessGoMData')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/GoMIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ScanRequest Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get request id",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "scanrequest_metadata_file",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Filename": {
                                        "value": "@pipeline().parameters.MetadataFileName",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Save in DB",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Get request id",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessScanRequest",
                                "type": "DataFlowReference"
                            },
                            "integrationRuntime": {
                                "referenceName": "ScanOnDemandIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Get file properties",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [
                            {
                                "activity": "Save in DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetFileProperties",
                            "method": "POST",
                            "body": {
                                "value": "@activity('Get request id').output.value[0]",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "UpdateItemFields",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [
                            {
                                "activity": "Get file properties",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "storedProcedureName": "[[dbo].[update_scanproperties]",
                            "storedProcedureParameters": {
                                "pProperties": {
                                    "value": {
                                        "value": "@activity('Get file properties').output.Response",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                },
                                "pRequestId": {
                                    "value": {
                                        "value": "@activity('Get request id').output.value[0].OrderNumber",
                                        "type": "Expression"
                                    },
                                    "type": "String"
                                }
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMGovernanceDB",
                            "type": "LinkedServiceReference"
                        }
                    }
                ],
                "parameters": {
                    "MetadataFileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2022-06-20T19:57:17Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessScanRequestFile')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/ScanOnDemandIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ScanRequest Pipeline scheduled')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get request ids",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Check if container has items",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "wildcardFolderPath": "metadata",
                                    "wildcardFileName": "*.json",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "dataset": {
                                "referenceName": "scanrequest_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEachId",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Save in DB",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get request ids').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get file properties",
                                    "type": "AzureFunctionActivity",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "functionName": "GetFileProperties",
                                        "method": "POST",
                                        "body": {
                                            "value": "@item()",
                                            "type": "Expression"
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "MCOMFunctions",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "UpdateItemFields",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Get file properties",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[update_scanproperties]",
                                        "storedProcedureParameters": {
                                            "pProperties": {
                                                "value": {
                                                    "value": "@activity('Get file properties').output.Response",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pRequestId": {
                                                "value": {
                                                    "value": "@item().OrderNumber",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "MCOMGovernanceDB",
                                        "type": "LinkedServiceReference"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Save in DB",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Get request ids",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessScanRequest",
                                "type": "DataFlowReference"
                            },
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Check if container has items",
                        "type": "Validation",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "scanrequest_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "timeout": "0.00:01:00",
                            "sleep": 10,
                            "childItems": true
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2022-06-09T22:04:36Z"
            },            
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessScanRequest')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/Exchange Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Process Exchange data",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "SetLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "1.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "ProcessExchangeData",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "SharePointSiteUrl": {
                                        "value": "'@{variables('SharePointSiteUrl')}'",
                                        "type": "Expression"
                                    },
                                    "TempFileLocation": {
                                        "value": "'@{'exchange/files/'}'",
                                        "type": "Expression"
                                    },
                                    "LibraryId": {
                                        "value": "'@{variables('LibraryId')}'",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "integrationRuntime": {
                                "referenceName": "ExchangeIR",
                                "type": "IntegrationRuntimeReference"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "GetDestinationLibraryId",
                        "type": "AzureFunctionActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "functionName": "GetDriveId",
                            "method": "POST",
                            "body": {
                                "value": "@concat('{\"siteUrl\":\"',variables('SharePointSiteUrl'), '\",\"libraryName\":\"', formatDateTime(utcnow(), 'yyyy'), '\"}')",
                                "type": "Expression"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "MCOMFunctions",
                            "type": "LinkedServiceReference"
                        }
                    },
                    {
                        "name": "SetLibraryId",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "GetDestinationLibraryId",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "LibraryId",
                            "value": {
                                "value": "@activity('GetDestinationLibraryId').output.DriveId",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "parameters": {
                    "SourceContainer": {
                        "type": "string"
                    }
                },
                "variables": {
                    "SharePointSiteUrl": {
                        "type": "String",
                        "defaultValue": "https://statoilintegrationtest.sharepoint.com/sites/EIMExchangeOnlineArchive"
                    },
                    "LibraryName": {
                        "type": "String",
                        "defaultValue": "Documents"
                    },
                    "LibraryId": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2022-03-30T08:33:47Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/dataflows/ProcessExchangeData')]",
                "[concat(variables('factoryId'), '/integrationRuntimes/ExchangeIR')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ScanExecution Pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get Files in folder",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "scanexecution_files_dataset",
                                "type": "DatasetReference"
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "SftpReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false,
                                "disableChunking": false
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Iterate through files",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Filter json files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Filter json files').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get File Metadata",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "scanexecution_file_dataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "lastModified",
                                            "itemName",
                                            "size"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Upsert Scan Execution",
                                    "type": "SqlServerStoredProcedure",
                                    "dependsOn": [
                                        {
                                            "activity": "Get File Metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "storedProcedureName": "[[dbo].[upsert_scanexecution]",
                                        "storedProcedureParameters": {
                                            "pFileName": {
                                                "value": {
                                                    "value": "@activity('Get File Metadata').output.itemName",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pRequestId": {
                                                "value": {
                                                    "value": "@substring(activity('Get File Metadata').output.itemName, 0 , lastIndexOf(activity('Get File Metadata').output.itemName, '.'))",
                                                    "type": "Expression"
                                                },
                                                "type": "String"
                                            },
                                            "pScannedDate": {
                                                "value": {
                                                    "value": "@activity('Get File Metadata').output.lastModified",
                                                    "type": "Expression"
                                                },
                                                "type": "DateTime"
                                            },
                                            "pSize": {
                                                "value": {
                                                    "value": "@activity('Get File Metadata').output.size",
                                                    "type": "Expression"
                                                },
                                                "type": "Int32"
                                            }
                                        }
                                    },
                                    "linkedServiceName": {
                                        "referenceName": "MCOMGovernanceDB",
                                        "type": "LinkedServiceReference"
                                    }
                                },
                                {
                                    "name": "Send data to files folder",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Scan request item",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "recursive": true,
                                                "deleteFilesAfterCompletion": true,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings",
                                                "metadata": [
                                                    {
                                                        "name": "itemid",
                                                        "value": {
                                                            "value": "@activity('Get Scan request item').output.firstRow.itemid",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    {
                                                        "name": "webid",
                                                        "value": {
                                                            "value": "@activity('Get Scan request item').output.firstRow.webid",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    {
                                                        "name": "siteid",
                                                        "value": {
                                                            "value": "@activity('Get Scan request item').output.firstRow.siteid",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    {
                                                        "name": "listid",
                                                        "value": {
                                                            "value": "@activity('Get Scan request item').output.firstRow.listid",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    {
                                                        "name": "OrderNumber",
                                                        "value": {
                                                            "value": "@activity('Get Scan request item').output.firstRow.ordernumber",
                                                            "type": "Expression"
                                                        }
                                                    },
                                                    {
                                                        "name": "FileLeafRef",
                                                        "value": {
                                                            "value": "@activity('Get File Metadata').output.itemName\r\n",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "enableStaging": false,
                                        "dataIntegrationUnits": 2
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "scanexecution_file_dataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileName": "@item().name"
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "scanexecution_output_file",
                                            "type": "DatasetReference"
                                        }
                                    ]
                                },
                                {
                                    "name": "Get Scan request item",
                                    "type": "Lookup",
                                    "dependsOn": [
                                        {
                                            "activity": "Upsert Scan Execution",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "7.00:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlMISource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('select * from MCOMScanRequest where id = ''', substring(activity('Get File Metadata').output.itemName, 0 , lastIndexOf(activity('Get File Metadata').output.itemName, '.')), '''')",
                                                "type": "Expression"
                                            },
                                            "partitionOption": "None"
                                        },
                                        "dataset": {
                                            "referenceName": "scanexecution_db_dataset",
                                            "type": "DatasetReference"
                                        },
                                        "firstRowOnly": true
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Filter json files",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Files in folder",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Files in folder').output.childItems",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@equals(item().type,'File')",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "annotations": [],
                "lastPublishTime": "2022-05-18T13:39:03Z"
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/scanexecution_files_dataset')]",
                "[concat(variables('factoryId'), '/datasets/scanexecution_file_dataset')]",
                "[concat(variables('factoryId'), '/datasets/scanexecution_output_file')]",
                "[concat(variables('factoryId'), '/datasets/scanexecution_db_dataset')]",
                "[concat(variables('factoryId'), '/linkedServices/MCOMGovernanceDB')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessDCFdata')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "dcf_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "dcffilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "dcf_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "FileDestinationOpen"
                        },
                        {
                            "dataset": {
                                "referenceName": "dcf_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "FileDestinationRestricted"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "CheckDestination"
                        },
                        {
                            "name": "SetRestrictedColumn"
                        },
                        {
                            "name": "SetOpenColumn"
                        },
                        {
                            "name": "SetCustomFields"
                        },
                        {
                            "name": "FieldsMapping"
                        },
                        {
                            "name": "DataTransformation",
                            "description": "Creates an explicit mapping for each drifted column"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string (''),\n\tTempFileLocation as string (''),\n\tOpenLibraryDriveId as string (''),\n\tRestrictedLibraryDriveId as string ('')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\tdocumentForm: 'singleDocument') ~> dcffilesource\nSetCustomFields split(startsWith(LRMUniqueFolderId, \"SA.\"),\n\tdisjoint: false) ~> CheckDestination@(SendToRestrictedLibrary, SendToOpenLibrary)\nCheckDestination@SendToRestrictedLibrary derive(driveid = $RestrictedLibraryDriveId) ~> SetRestrictedColumn\nCheckDestination@SendToOpenLibrary derive(driveid = $OpenLibraryDriveId) ~> SetOpenColumn\nFieldsMapping derive(DestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tFilename = concat(LRMHPECMRecordID,'_', trim(replace(replace(iif(endsWith(Filename, \".\"), replace(Filename, \".\", \"\"), Filename), \"/\", \"\"), \"@\", \"\"), \",. \")),\n\t\tdocumentId = LRMHPECMRecordID,\n\t\tTitle = Filename,\n\t\tdocumentIdField = 'LRMHPECMRecordID') ~> SetCustomFields\nDataTransformation select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMArchivedBy = {ARCHIVED USER},\n\t\tLRMAttachments = ATTACHMENTS,\n\t\tLRMBOLDate = {B/L DATE},\n\t\tLRMBroker = BROKER,\n\t\tLRMCargoNumber = {CARGO NUMBER},\n\t\tLRMCustomer = CUSTOMER,\n\t\tLRMDateExecuted = {DATE EXECUTED},\n\t\tLRMDealNumber = {DEAL NUMBER},\n\t\tLRMDischargePort = {DISCHARGE PORT},\n\t\tLRMHPECMRecordID = documentId,\n\t\tLRMFolderType = {FOLDER TYPE},\n\t\tLRMLoadPort = {LOAD PORT},\n\t\tLRMQuality = QUALITY,\n\t\tLRMResponsibleOperator = {RESPONSIBLE OPS},\n\t\tLRMTo = TO,\n\t\tLRMTransmissionDate = {TRANSMISSION DATE},\n\t\tLRMUniqueFolderId = {UNIQUE FOLDER ID},\n\t\tLRMVessel = VESSEL,\n\t\tLRMVoyageNumber = {VOYAGE NUMBER},\n\t\tusecsom\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FieldsMapping\ndcffilesource derive({ARCHIVED USER} = toString(byName('ARCHIVED USER')),\n\t\tATTACHMENTS = toString(byName('ATTACHMENTS')),\n\t\t{B/L DATE} = toString(byName('B/L DATE')),\n\t\tBROKER = toString(byName('BROKER')),\n\t\t{CARGO NUMBER} = toString(byName('CARGO NUMBER')),\n\t\tCUSTOMER = toString(byName('CUSTOMER')),\n\t\t{DATE EXECUTED} = toString(byName('DATE EXECUTED')),\n\t\t{DEAL NUMBER} = toString(byName('DEAL NUMBER')),\n\t\t{DISCHARGE PORT} = toString(byName('DISCHARGE PORT')),\n\t\t{FOLDER TYPE} = toString(byName('FOLDER TYPE')),\n\t\tFilename = toString(byName('Filename')),\n\t\t{LOAD PORT} = toString(byName('LOAD PORT')),\n\t\tQUALITY = toString(byName('QUALITY')),\n\t\t{RESPONSIBLE OPS} = toString(byName('RESPONSIBLE OPS')),\n\t\tSource = toString(byName('Source')),\n\t\tTO = toString(byName('TO')),\n\t\t{TRANSMISSION DATE} = toString(byName('TRANSMISSION DATE')),\n\t\t{UNIQUE FOLDER ID} = toString(byName('UNIQUE FOLDER ID')),\n\t\tVESSEL = toString(byName('VESSEL')),\n\t\t{VOYAGE NUMBER} = toString(byName('VOYAGE NUMBER')),\n\t\tdocumentId = toString(byName('documentId')),\n\t\ttitle = toString(byName('title')),\n\t\tusecsom = false()) ~> DataTransformation\nSetRestrictedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FileDestinationOpen\nSetOpenColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FileDestinationRestricted"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/dcf_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/dcf_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessDCFdataMaintenance')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "dcf_metadata_dataset_manual",
                                "type": "DatasetReference"
                            },
                            "name": "dcffilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "dcf_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "FileDestinationOpen"
                        },
                        {
                            "dataset": {
                                "referenceName": "dcf_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "FileDestinationRestricted"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "CheckDestination"
                        },
                        {
                            "name": "SetRestrictedColumn"
                        },
                        {
                            "name": "SetOpenColumn"
                        },
                        {
                            "name": "SetFileName"
                        },
                        {
                            "name": "FieldsMapping"
                        },
                        {
                            "name": "DataTransformation",
                            "description": "Creates an explicit mapping for each drifted column"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string,\n\tTempFileLocation as string,\n\tOpenLibraryDriveId as string,\n\tRestrictedLibraryDriveId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\tmodifiedBefore: (currentTimestamp()-minutes(30)),\n\tdocumentForm: 'singleDocument') ~> dcffilesource\nSetFileName split(startsWith(LRMUniqueFolderId, \"SA.\"),\n\tdisjoint: false) ~> CheckDestination@(SendToRestrictedLibrary, SendToOpenLibrary)\nCheckDestination@SendToRestrictedLibrary derive(driveid = $RestrictedLibraryDriveId) ~> SetRestrictedColumn\nCheckDestination@SendToOpenLibrary derive(driveid = $OpenLibraryDriveId) ~> SetOpenColumn\nFieldsMapping derive(DestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tFilename = concat(LRMHPECMRecordID,'_', trim(replace(replace(iif(endsWith(Filename, \".\"), replace(Filename, \".\", \"\"), Filename), \"/\", \"\"), \"@\", \"\"), \",. \")),\n\t\tdocumentId = LRMHPECMRecordID,\n\t\tTitle = Filename) ~> SetFileName\nDataTransformation select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMArchivedBy = {ARCHIVED USER},\n\t\tLRMAttachments = ATTACHMENTS,\n\t\tLRMBOLDate = {B/L DATE},\n\t\tLRMBroker = BROKER,\n\t\tLRMCargoNumber = {CARGO NUMBER},\n\t\tLRMCustomer = CUSTOMER,\n\t\tLRMDateExecuted = {DATE EXECUTED},\n\t\tLRMDealNumber = {DEAL NUMBER},\n\t\tLRMDischargePort = {DISCHARGE PORT},\n\t\tLRMHPECMRecordID = documentId,\n\t\tLRMFolderType = {FOLDER TYPE},\n\t\tLRMLoadPort = {LOAD PORT},\n\t\tLRMQuality = QUALITY,\n\t\tLRMResponsibleOperator = {RESPONSIBLE OPS},\n\t\tLRMTo = TO,\n\t\tLRMTransmissionDate = {TRANSMISSION DATE},\n\t\tLRMUniqueFolderId = {UNIQUE FOLDER ID},\n\t\tLRMVessel = VESSEL,\n\t\tLRMVoyageNumber = {VOYAGE NUMBER},\n\t\tusecsom\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FieldsMapping\ndcffilesource derive({ARCHIVED USER} = toString(byName('ARCHIVED USER')),\n\t\tATTACHMENTS = toString(byName('ATTACHMENTS')),\n\t\t{B/L DATE} = toString(byName('B/L DATE')),\n\t\tBROKER = toString(byName('BROKER')),\n\t\t{CARGO NUMBER} = toString(byName('CARGO NUMBER')),\n\t\tCUSTOMER = toString(byName('CUSTOMER')),\n\t\t{DATE EXECUTED} = toString(byName('DATE EXECUTED')),\n\t\t{DEAL NUMBER} = toString(byName('DEAL NUMBER')),\n\t\t{DISCHARGE PORT} = toString(byName('DISCHARGE PORT')),\n\t\t{FOLDER TYPE} = toString(byName('FOLDER TYPE')),\n\t\tFilename = toString(byName('Filename')),\n\t\t{LOAD PORT} = toString(byName('LOAD PORT')),\n\t\tQUALITY = toString(byName('QUALITY')),\n\t\t{RESPONSIBLE OPS} = toString(byName('RESPONSIBLE OPS')),\n\t\tSource = toString(byName('Source')),\n\t\tTO = toString(byName('TO')),\n\t\t{TRANSMISSION DATE} = toString(byName('TRANSMISSION DATE')),\n\t\t{UNIQUE FOLDER ID} = toString(byName('UNIQUE FOLDER ID')),\n\t\tVESSEL = toString(byName('VESSEL')),\n\t\t{VOYAGE NUMBER} = toString(byName('VOYAGE NUMBER')),\n\t\tdocumentId = toString(byName('documentId')),\n\t\ttitle = toString(byName('title')),\n\t\tusecsom = false()) ~> DataTransformation\nSetRestrictedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FileDestinationOpen\nSetOpenColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FileDestinationRestricted"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/dcf_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/dcf_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessEdiBankData')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "edibank_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "edibankfilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "edibank_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "edibankfiledestination"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DataTransformation"
                        },
                        {
                            "name": "DynamicFetchData",
                            "description": "Creates an explicit mapping for each drifted column"
                        },
                        {
                            "name": "SharePointFieldMappings"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string,\n\tTempFileLocation as string,\n\tLibraryId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\tdocumentForm: 'singleDocument') ~> edibankfilesource\nSharePointFieldMappings derive(each(match(instr(name,'date')>0), $$ = toString(toDate(toString($$), 'yyyy-MM-dd'), 'MM/dd/yyyy HH:mm:ss')),\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tDestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tFilename = concat(LRMHPECMRecordID,'_',Filename),\n\t\tdriveid = $LibraryId,\n\t\tTitle = Filename,\n\t\tdocumentIdField = 'LRMHPECMRecordID',\n\t\tdocumentId = LRMHPECMRecordID) ~> DataTransformation\nedibankfilesource derive(Filename = toString(byName('Filename')),\n\t\tSource = toString(byName('Source')),\n\t\tbusinesspartner = toString(byName('businesspartner')),\n\t\tdocumentId = toString(byName('documentId')),\n\t\tdocumenttype = toString(byName('documenttype')),\n\t\texternalreference = toString(byName('externalreference')),\n\t\tfileid = toString(byName('fileid')),\n\t\tlinkedreference = toString(byName('linkedreference')),\n\t\trecipientscompany = toString(byName('recipientscompany')),\n\t\tsignaturekey = toString(byName('signaturekey')),\n\t\ttechnicaldocumenttype = toString(byName('technicaldocumenttype')),\n\t\ttransmissiondate = toString(byName('transmissiondate')),\n\t\ttransportsystem = toString(byName('transportsystem'))) ~> DynamicFetchData\nDynamicFetchData select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMBusinessPartner = businesspartner,\n\t\tLRMHPECMRecordID = documentId,\n\t\tLRMDocumentType = documenttype,\n\t\tLRMExternalReference = externalreference,\n\t\tLRMFileId = fileid,\n\t\tLRMLinkedReference = linkedreference,\n\t\tLRMRecipientCompany = recipientscompany,\n\t\tLRMSignatureKey = signaturekey,\n\t\tLRMTechDocType = technicaldocumenttype,\n\t\tLRMTransmissionDate = transmissiondate,\n\t\tLRMTransportSystem = transportsystem\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SharePointFieldMappings\nDataTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> edibankfiledestination"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/edibank_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/edibank_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessGasOpsData')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "gasops_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "gasopsfilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "gasops_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "gasopsfiledestination"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DataTransformation"
                        },
                        {
                            "name": "DynamicFetchData",
                            "description": "Creates an explicit mapping for each drifted column"
                        },
                        {
                            "name": "SharePointFieldMapping"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string,\n\tTempFileLocation as string,\n\tLibraryId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\trowUrlColumn: 'TempDataFile',\n\tdocumentForm: 'singleDocument') ~> gasopsfilesource\nSharePointFieldMapping derive(each(match(instr(name,'date')>0), $$ = toString(toDate(toString($$), 'yyyy-MM-dd'), 'MM/dd/yyyy HH:mm:ss')),\n\t\tdriveid = $LibraryId,\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tDestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tFilename = concat(LRMHPECMRecordID,'_',Filename),\n\t\tTitle = Filename,\n\t\tusecsom = false(),\n\t\tdocumentIdField = 'LRMHPECMRecordID',\n\t\tdocumentId = LRMHPECMRecordID) ~> DataTransformation\ngasopsfilesource derive(Filename = toString(byName('Filename')),\n\t\tSource = toString(byName('Source')),\n\t\tdirection = toString(byName('direction')),\n\t\tdocumentId = toString(byName('documentId')),\n\t\tloggerId = toString(byName('loggerId')),\n\t\tpartner = toString(byName('partner')),\n\t\tpublisheddate = toString(byName('publisheddate'))) ~> DynamicFetchData\nDynamicFetchData select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMMessageDirection = direction,\n\t\tLRMHPECMRecordID = documentId,\n\t\tLRMLoggerId = loggerId,\n\t\tLRMPartner = partner,\n\t\tLRMPublished = publisheddate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SharePointFieldMapping\nDataTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> gasopsfiledestination"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/gasops_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/gasops_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessGoMData')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "gom_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "gomfilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "gom_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "gomfiledestination"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DataTransformation"
                        },
                        {
                            "name": "DynamicFetchData",
                            "description": "Creates an explicit mapping for each drifted column"
                        },
                        {
                            "name": "SharePointFieldMapping"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string,\n\tTempFileLocation as string,\n\tLibraryId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\trowUrlColumn: 'TempDataFile',\n\tdocumentForm: 'singleDocument') ~> gomfilesource\nSharePointFieldMapping derive(each(match(instr(name,'date')>0), $$ = toString(toDate(toString($$), 'yyyy-MM-dd'), 'MM/dd/yyyy HH:mm:ss')),\n\t\tdriveid = $LibraryId,\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tDestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tTitle = Filename,\n\t\tusecsom = false(),\n\t\tdocumentIdField = 'LRMHPECMRecordID') ~> DataTransformation\ngomfilesource derive(Filename = toString(byName('Filename')),\n\t\tSource = toString(byName('Source')),\n\t\tgom_document_id = toString(byName('gom_document_id')),\n\t\tgom_document_number = toString(byName('gom_document_number')),\n\t\tgom_document_name = toString(byName('gom_document_name')),\n\t\tgom_origunal_file_name = toString(byName('gom_origunal_file_name')),\n\t\tgom_issue_date = toString(byName('gom_issue_date')),\n\t\tgom_issued_by = toString(byName('gom_issued_by')),\n\t\tgom_commodity_type = toString(byName('gom_commodity_type')),\n\t\tgom_activity_start_date = toString(byName('gom_activity_start_date')),\n\t\tgom_activity_end_date = toString(byName('gom_activity_end_date')),\n\t\tdocumentId = toString(byName('documentId'))) ~> DynamicFetchData\nDynamicFetchData select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMMessageDirection = gom_document_id,\n\t\tLRMLoggerId = gom_document_name,\n\t\tLRMPartner = gom_origunal_file_name,\n\t\tLRMPublished = gom_issue_date,\n\t\tLRMHPECMRecordID = documentId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SharePointFieldMapping\nDataTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> gomfiledestination"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/gom_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/gom_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessExchangeData')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "exchange_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "exchangefilesource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "exchange_output_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "exchangefiledestination"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "DataTransformation"
                        },
                        {
                            "name": "DynamicFetchData",
                            "description": "Creates an explicit mapping for each drifted column"
                        },
                        {
                            "name": "SharePointFieldMappings"
                        }
                    ],
                    "script": "parameters{\n\tSharePointSiteUrl as string,\n\tTempFileLocation as string,\n\tLibraryId as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tmoveFiles: ['/metadata','metadataprocessed'],\n\tdocumentForm: 'singleDocument') ~> exchangefilesource\nSharePointFieldMappings derive(each(match(instr(name,'date')>0), $$ = toString(toDate(toString($$), 'yyyy-MM-dd'), 'MM/dd/yyyy HH:mm:ss')),\n\t\tTempFileLocation = concat($TempFileLocation, LRMHPECMRecordID),\n\t\tDestFilename = concat(LRMHPECMRecordID, '.json'),\n\t\tFilename = concat(LRMHPECMRecordID,'_',Filename),\n\t\tdriveid = $LibraryId,\n\t\tTitle = Filename,\n\t\tdocumentIdField = 'LRMHPECMRecordID',\n\t\tdocumentId = LRMHPECMRecordID) ~> DataTransformation\nexchangefilesource derive(Filename = toString(byName('Filename')),\n\t\tSource = toString(byName('Source')),\n\t\tfrom = toString(byName('From')),\n\t\tto = toString(byName('To')),\n\t\tdate = toString(byName('Date')),\n\t\tsubject = toString(byName('Subject')),\n\t\tmessageId = toString(byName('MsgId')),\n\t\tdocumentId = toString(byName('documentId'))) ~> DynamicFetchData\nDynamicFetchData select(mapColumn(\n\t\tFilename,\n\t\tSource,\n\t\tLRMHPECMRecordID = documentId,\n\t\tLRMFrom = from,\n\t\tLRMTo = to,\n\t\tLRMMessageDate = date,\n\t\tLRMSubject = subject,\n\t\tLRMMessageId = messageId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SharePointFieldMappings\nDataTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn:'DestFilename',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> exchangefiledestination"
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/exchange_metadata_dataset')]",
                "[concat(variables('factoryId'), '/datasets/exchange_output_metadata_dataset')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessScanRequest')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "scanrequest_metadata_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "scandatasource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "mcom_governance_scanrequests",
                                "type": "DatasetReference"
                            },
                            "name": "SaveToDB"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        },
                        {
                            "name": "TransformationColumns"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          ItemId as string,",
                        "          SiteId as string,",
                        "          WebId as string,",
                        "          ListId as string,",
                        "          WBS as string,",
                        "          RequestedBy as string,",
                        "          RequestedDate as string,",
                        "          DocumentName as string,",
                        "          Vendor as string,",
                        "          Comments as string,",
                        "          OrderNumber as string,",
                        "          Status as string,",
                        "          IsPhysical as boolean,",
                        "          BusinessArea as string,",
                        "          Priority as string,",
                        "          CompanyCode as string",
                        "     ),",
                        "     allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: true,",
                        "     moveFiles: ['/metadata','metadataprocessed'],",
                        "     documentForm: 'singleDocument') ~> scandatasource",
                        "TransformationColumns alterRow(upsertIf(true())) ~> AlterRow",
                        "scandatasource derive(recordId = OrderNumber,",
                        "          requestedDateTransformed = toDate(RequestedDate)) ~> TransformationColumns",
                        "AlterRow sink(allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as string,",
                        "          requester as string,",
                        "          webid as string,",
                        "          listid as string,",
                        "          siteid as string,",
                        "          requestdate as timestamp,",
                        "          wbs as string,",
                        "          businessunit as string,",
                        "          itemid as string,",
                        "          documentname as string,",
                        "          vendor as string,",
                        "          comments as string,",
                        "          ordernumber as string,",
                        "          status as string,",
                        "          isphysical as boolean,",
                        "          filemetadata as string,",
                        "          priority as string,",
                        "          companycode as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:true,",
                        "     keys:['id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id = recordId,",
                        "          requester = RequestedBy,",
                        "          webid = WebId,",
                        "          listid = ListId,",
                        "          siteid = SiteId,",
                        "          wbs = WBS,",
                        "          businessunit = BusinessArea,",
                        "          itemid = ItemId,",
                        "          documentname = DocumentName,",
                        "          vendor = Vendor,",
                        "          comments = Comments,",
                        "          ordernumber = OrderNumber,",
                        "          status = Status,",
                        "          isphysical = IsPhysical,",
                        "          requestdate = requestedDateTransformed,",
                        "          priority = Priority,",
                        "          companycode = CompanyCode",
                        "     )) ~> SaveToDB"
                    ]
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ProcessScanRequestFile')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "scanrequest_metadata_file",
                                "type": "DatasetReference"
                            },
                            "name": "scandatasource"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "mcom_governance_scanrequests",
                                "type": "DatasetReference"
                            },
                            "name": "SaveToDB"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "AlterRow"
                        },
                        {
                            "name": "TransformationColumns"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     Filename as string",
                        "}",
                        "source(output(",
                        "          ItemId as string,",
                        "          SiteId as string,",
                        "          WebId as string,",
                        "          ListId as string,",
                        "          WBS as string,",
                        "          RequestedBy as string,",
                        "          RequestedDate as string,",
                        "          DocumentName as string,",
                        "          Vendor as string,",
                        "          Comments as string,",
                        "          OrderNumber as string,",
                        "          Status as string,",
                        "          IsPhysical as boolean,",
                        "          BusinessArea as string,",
                        "          Priority as string,",
                        "          CompanyCode as string",
                        "     ),",
                        "     allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: true,",
                        "     moveFiles: ['/metadata','metadataprocessed'],",
                        "     documentForm: 'singleDocument') ~> scandatasource",
                        "TransformationColumns alterRow(upsertIf(true())) ~> AlterRow",
                        "scandatasource derive(recordId = OrderNumber,",
                        "          requestedDateTransformed = toDate(RequestedDate)) ~> TransformationColumns",
                        "AlterRow sink(allowSchemaDrift: false,",
                        "     validateSchema: false,",
                        "     input(",
                        "          id as string,",
                        "          requester as string,",
                        "          webid as string,",
                        "          listid as string,",
                        "          siteid as string,",
                        "          requestdate as timestamp,",
                        "          wbs as string,",
                        "          businessunit as string,",
                        "          itemid as string,",
                        "          documentname as string,",
                        "          vendor as string,",
                        "          comments as string,",
                        "          ordernumber as string,",
                        "          status as string,",
                        "          isphysical as boolean,",
                        "          filemetadata as string,",
                        "          priority as string,",
                        "          companycode as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:true,",
                        "     keys:['id'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError',",
                        "     mapColumn(",
                        "          id = recordId,",
                        "          requester = RequestedBy,",
                        "          webid = WebId,",
                        "          listid = ListId,",
                        "          siteid = SiteId,",
                        "          wbs = WBS,",
                        "          businessunit = BusinessArea,",
                        "          itemid = ItemId,",
                        "          documentname = DocumentName,",
                        "          vendor = Vendor,",
                        "          comments = Comments,",
                        "          ordernumber = OrderNumber,",
                        "          status = Status,",
                        "          isphysical = IsPhysical,",
                        "          requestdate = requestedDateTransformed,",
                        "          priority = Priority,",
                        "          companycode = CompanyCode",
                        "     )) ~> SaveToDB"
                    ]
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/datasets/scanrequest_metadata_file')]",
                "[concat(variables('factoryId'), '/datasets/mcom_governance_scanrequests')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/MCOMIntegrationRuntime')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GoMIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GasOpsIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 16,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/DCFIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "MemoryOptimized",
                            "coreCount": 16,
                            "timeToLive": 30,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ScanOnDemandIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/EdiBankIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 16,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ExchangeIR')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 10,
                            "cleanup": false
                        }
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/ScanRequestBlobTrigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "ScanRequest Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "MetadataFileName": "@triggerBody().fileName"
                        }
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/scanrequests/blobs/metadata/",
                    "ignoreEmptyBlobs": true,
                    "scope": "[parameters('triggerScope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/ScanRequest Pipeline')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/DCF Blob trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "DCF Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "SourceContainer": "[parameters('triggerParam_SourceContainer')]",
                            "SourceFileName": "[parameters('triggerParam_SourceFilename')]"
                        }
                    }
                ],
                "type": "BlobEventsTrigger",
                "typeProperties": {
                    "blobPathBeginsWith": "/dcf/blobs/files/",
                    "ignoreEmptyBlobs": true,
                    "scope": "[parameters('triggerScope')]",
                    "events": [
                        "Microsoft.Storage.BlobCreated"
                    ]
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/DCF Pipeline')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/DCF Scheduled trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "DCF Pipeline Maintenance",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "SourceContainer": "dcf"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Hour",
                        "interval": 1,
                        "startTime": "2022-04-06T09:53:00Z",
                        "timeZone": "UTC"
                    }
                }
            }
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/EDIBank Window Schedule')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "EdiBank Pipeline",
                        "type": "PipelineReference"
                    },
                    "parameters": {
                        "SourceContainer": "edibank"
                    }
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Minute",
                    "interval": 30,
                    "startTime": "2021-11-16T14:08:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 50,
                    "retryPolicy": {
                        "count": 3,
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/EdiBank Pipeline')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GasOps Window Schedule')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "GasOps Pipeline",
                        "type": "PipelineReference"
                    }
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Minute",
                    "interval": 30,
                    "startTime": "2022-04-28T22:27:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 50,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/GasOps Pipeline')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/GoM Trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Started",
                "pipeline": {
                    "pipelineReference": {
                        "referenceName": "GoM Pipeline",
                        "type": "PipelineReference"
                    },
                    "parameters": {
                        "SourceContainer": "gom"
                    }
                },
                "type": "TumblingWindowTrigger",
                "typeProperties": {
                    "frequency": "Minute",
                    "interval": 60,
                    "startTime": "2021-12-07T11:48:00Z",
                    "delay": "00:00:00",
                    "maxConcurrency": 50,
                    "retryPolicy": {
                        "intervalInSeconds": 30
                    },
                    "dependsOn": []
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/GoM Pipeline')]"
            ]
        },
        {
            "name": "[concat(variables('dataFactoryName'), '/Exchange scheduled trigger')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "Exchange Pipeline",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "SourceContainer": "exchange"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Minute",
                        "interval": 5,
                        "startTime": "2022-04-05T11:42:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[variables('factoryId')]",
                "[concat(variables('factoryId'), '/pipelines/Exchange Pipeline')]"
            ]
        }
    ],
    "outputs": {}
}